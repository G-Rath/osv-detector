package lockfile

import (
	"bufio"
	"fmt"
	"io"
	"io/fs"
	"os"
	"path/filepath"
	"sort"
	"strings"
)

func readPythonSitePackageMetadata(r io.Reader) (name, version string, err error) {
	scanner := bufio.NewScanner(r)

	for scanner.Scan() {
		line := scanner.Text()

		if strings.HasPrefix(line, "Name: ") {
			if name != "" {
				return name, version, fmt.Errorf("multiple name fields found")
			}

			name = strings.TrimPrefix(line, "Name: ")
		}

		if strings.HasPrefix(line, "Version: ") {
			if version != "" {
				return name, version, fmt.Errorf("multiple version fields found")
			}

			version = strings.TrimPrefix(line, "Version: ")
		}
	}

	if err := scanner.Err(); err != nil {
		return name, version, err
	}

	if name == "" {
		err = fmt.Errorf("failed to find package name")
	}

	if version == "" {
		err = fmt.Errorf("failed to find package version")
	}

	return name, version, err
}

func WalkPythonSitePackages(pathToPythonSitePackages string) (Lockfile, error) {
	var packages []PackageDetails

	err := filepath.Walk(pathToPythonSitePackages, func(path string, info fs.FileInfo, err error) error {
		if info == nil {
			return err
		}

		if info.IsDir() {
			metadataFile := ""

			if strings.HasSuffix(info.Name(), ".dist-info") {
				metadataFile = "METADATA"
			}

			if strings.HasSuffix(info.Name(), ".egg-info") {
				metadataFile = "PKG-INFO"
			}

			if metadataFile != "" {
				f, err := os.Open(filepath.Join(path, metadataFile))
				if err != nil {
					_, _ = fmt.Fprintf(os.Stderr, "%v\n", err)

					return nil
				}

				name, version, err := readPythonSitePackageMetadata(f)

				if err != nil {
					_, _ = fmt.Fprintf(os.Stderr, "%v\n", err)

					return nil
				}

				packages = append(packages, PackageDetails{
					Name:      name,
					Version:   version,
					Commit:    "",
					Ecosystem: PipEcosystem,
					CompareAs: PipEcosystem,
				})

				return fs.SkipDir
			}
		}

		return nil
	})

	sort.Slice(packages, func(i, j int) bool {
		if packages[i].Name == packages[j].Name {
			return packages[i].Version < packages[j].Version
		}

		return packages[i].Name < packages[j].Name
	})

	return Lockfile{
		FilePath: pathToPythonSitePackages,
		ParsedAs: "site-packages",
		Packages: packages,
	}, err
}
